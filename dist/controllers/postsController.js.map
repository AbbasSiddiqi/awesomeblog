{"version":3,"sources":["../../server/controllers/postsController.js"],"names":["postsController","show","req","res","postId","params","post","Post","findById","populate","path","select","then","render","catch","err","errMessage","create","store","body","title","text","userId","_creator","save","newPost","redirect","status","json","getAll","posts","find","allPosts"],"mappings":";;;;;;AAAA;;;;;;AACA,IAAMA,kBAAkB,EAAxB;;AAEAA,gBAAgBC,IAAhB,GAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAMC,SAASF,IAAIG,MAAJ,CAAWD,MAA1B;;AAEA,MAAME,OAAO,iBAAGC,IAAH,CAAQC,QAAR,CAAiBJ,MAAjB,EAAyBK,QAAzB,CAAkC;AAC7CC,UAAM,UADuC;AAE7CC,YAAQ;AAFqC,GAAlC,EAIZF,QAJY,CAIH;AACR,YAAQ;AADA,GAJG,EAOZG,IAPY,CAON,UAACN,IAAD,EAAW;AAChB;AACAH,QAAIU,MAAJ,CAAW,YAAX,EAAyB,EAAEP,UAAF,EAAzB;AACD,GAVY,EAWZQ,KAXY,CAWL,UAACC,GAAD,EAAS;AACfZ,QAAIU,MAAJ,CAAW,YAAX,EAAyB,EAACG,YAAYD,GAAb,EAAkBT,MAAM,IAAxB,EAAzB;AACD,GAbY,CAAb;AAcD,CAjBD;;AAmBAN,gBAAgBiB,MAAhB,GAAyB,UAACf,GAAD,EAAMC,GAAN,EAAc;AACrCA,MAAIU,MAAJ,CAAW,cAAX;AACD,CAFD;;AAIAb,gBAAgBkB,KAAhB,GAAwB,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAIhCD,IAAIiB,IAJ4B;AAAA,MAElCC,KAFkC,aAElCA,KAFkC;AAAA,MAGlCC,IAHkC,aAGlCA,IAHkC;;;AAMpC,MAAMC,SAAS,0BAAf;;AAEA,MAAMhB,OAAO,IAAI,iBAAGC,IAAP,CAAY;AACvBa,gBADuB;AAEvBC,cAFuB;AAGvBE,cAAUD;AAHa,GAAZ,CAAb;;AAMAhB,OAAKkB,IAAL,GACGZ,IADH,CACS,UAACa,OAAD,EAAa;AAClBtB,QAAIuB,QAAJ,CAAa,QAAb;AACD,GAHH,EAIGZ,KAJH,CAIU,UAACC,GAAD,EAAS;AACfZ,QAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBZ,kBAAYD;AADO,KAArB;AAGD,GARH;AASD,CAvBD;;AAyBAf,gBAAgB6B,MAAhB,GAAyB,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAM2B,QAAQ,EAAd;;AAEA,mBAAGvB,IAAH,CAAQwB,IAAR,CAAa,EAAb,EACGtB,QADH,CACY;AACNC,UAAM,UADA;AAENC,YAAQ;AAFF,GADZ,EAKGF,QALH,CAKY;AACRC,UAAM;AADE,GALZ,EAQGE,IARH,CAQS,UAACoB,QAAD,EAAc;AACjB7B,QAAIU,MAAJ,CAAW,aAAX,EAAyB,EAACiB,OAAOE,QAAR,EAAzB;AACH,GAVH,EAWGlB,KAXH,CAWU,UAACC,GAAD,EAAS;AACfZ,QAAIU,MAAJ,CAAW,aAAX,EAAyB,EAACG,YAAYD,GAAb,EAAzB;AACD,GAbH;AAcD,CAjBD;;kBAmBef,e","file":"postsController.js","sourcesContent":["import db from '../models';\nconst postsController = {};\n\npostsController.show = (req, res) => {\n  const postId = req.params.postId;\n\n  const post = db.Post.findById(postId).populate({\n    path: '_creator',\n    select: \"username -_id\"\n  })\n  .populate({\n    'path': '_comments'\n  })\n  .then( (post ) => {\n    // res.status(200).json(post);\n    res.render(\"posts/show\", { post });\n  })\n  .catch( (err) => {\n    res.render(\"posts/show\", {errMessage: err, post: null});\n  });\n}\n\npostsController.create = (req, res) => {\n  res.render(\"posts/create\");\n}\n\npostsController.store = (req, res) => {\n  let {\n    title,\n    text\n  } = req.body;\n\n  const userId = \"598f6051349ed38bfda0b3bc\";\n\n  const post = new db.Post({\n    title,\n    text,\n    _creator: userId\n  });\n\n  post.save()\n    .then( (newPost) => {\n      res.redirect(\"/posts\");\n    })\n    .catch( (err) => {\n      res.status(500).json({\n        errMessage: err\n      });\n    });\n}\n\npostsController.getAll = (req, res) => {\n  const posts = [];\n\n  db.Post.find({})\n    .populate({\n        path: '_creator',\n        select: 'username -_id'\n    })\n    .populate({\n      path: '_comments',\n    })\n    .then( (allPosts) => {\n        res.render(\"posts/index\",{posts: allPosts});\n    })\n    .catch( (err) => {\n      res.render(\"posts/index\",{errMessage: err});\n    });\n}\n\nexport default postsController;\n"]}